import PushNotification, {Importance} from 'react-native-push-notification';
import PushNotificationIOS from "@react-native-community/push-notification-ios";

class Notifications {
  constructor() {
    this.lastId = 0;

    PushNotification.configure({
      /*onRegister: function(token) {
        console.log('TOKEN:', token);
      },*/
      onNotification: function(notification) {
        console.log('NOTIFICATION:', notification);

        if (Platform.OS === 'ios') {
          //handleNotification(notification)
          notification.finish(PushNotificationIOS.FetchResult.NoData);
        } else {
          //handleNotification(notification)
        }
      },
      permissions: {
        alert: true,
        badge: true,
        sound: true,
      },
      senderID: '877862471836',
      popInitialNotification: true,
      requestPermission: true,
    });

    // Clear badge number at start
    PushNotification.getApplicationIconBadgeNumber(function (number) {
      if (number > 0) {
        PushNotification.setApplicationIconBadgeNumber(0);
      }
    });

    PushNotification.createChannel(
      {
        channelId: 'notifications',
        channelName: 'Notifications for new reservation',
        channelDescription: 'Reminder for notifications',
        soundName: "default", // (optional) See `soundName` parameter of `localNotification` function
        importance: Importance.HIGH, // (optional) default: Importance.HIGH. Int value of the Android notification importance
        vibrate: true, // (optional) default: true. Creates the default vibration pattern if true.
      },
      (created) => console.log(`createChannel 'default-channel-id' returned '${created}'`)
    );

    PushNotification.getScheduledLocalNotifications(rn => {
      console.log('SN --- ', rn);
    });
  }

  localNotification(soundName, params) {
    this.lastId++;
    PushNotification.localNotification({
      /* Android Only Properties */
      channelId: soundName ? 'sound-channel-id' : 'default-channel-id',
      ticker: 'Vissit.in - Info', // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
      smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
//      bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
//      subText: 'This is a subText', // (optional) default: none
      color: 'red', // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
//      tag: 'reservasi', // (optional) add tag to message
//      group: 'reservasi', // (optional) add group to message
      groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
      ongoing: false, // (optional) set whether this is an "ongoing" notification
//      actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
      invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

      when: null, // (optionnal) Add a timestamp pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
      usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
      timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null

      /* iOS only properties */
      category: params[0].category, // (optional) default: empty string
      subtitle: params[0].subtitle, // (optional) smaller title below notification title

      /* iOS and Android properties */
      id: this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      title: 'Vissit.in', // (optional)
      message: params[0].message, // (required)
      userInfo: { screen: params[0].screen, data: params[0].data, id: params[0].id }, // (optional) default: {} (using null throws a JSON value '<null>' error)
      playSound: !!soundName, // (optional) default: true
      soundName: soundName ? soundName : 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    });
  }

  cancelNotificationById(id) {
    //alert(id);
    PushNotification.cancelLocalNotification(id);
  }

  cancelNotification() {
    PushNotification.cancelAllLocalNotifications();
  }

  scheduleNotification(date, params) {
    PushNotification.localNotificationSchedule({
      id: params[0].id,
      //channelId: 'reminders',
      title: 'Vissit.in',
      message: 'Anda memiliki jadwal kunjungan atas nama ' + params[0].client + ' pada pukul ' + params[0].jam + ' wib',
      date: date,
      //repeatType: 'minute',
      //repeatTime: 1
    });
  }

}

export default new Notifications();